---
# task file for Install Active Directory
- name: Inclure la configuration basic
  include_tasks: "../../../tasks/configure_basic.yml"


- name: Installer le rôle Active Directory Domain Services
  ansible.windows.win_feature:
    name: AD-Domain-Services
    state: present

- name: Vérifier ou créer le domaine
  microsoft.ad.domain:
    dns_domain_name: "{{dns_zrd_name}}"
    domain_netbios_name: "{{netbios_name}}"
    forest_mode: "default"
    domain_mode: "default"
    create_dns_delegation: "no"
    safe_mode_password: "{{windows_admin_password}}"
    database_path: "E:\\Windows\\NTDS"
    sysvol_path: "E:\\Windows\\SYSVOL"
    log_path: "E:\\Windows\\Logs"
    reboot: true
    reboot_timeout: 1800

#- name: Inclure la configuration ad basic
#  include_tasks: "../../../tasks/configure_ad_basic.yml"



- name: Vérifier si l'antériorité maximale du mot de passe est déjà configurée
  ansible.windows.win_shell: |
    Import-Module GroupPolicy
    $policy = Get-ADDefaultDomainPasswordPolicy
    ($policy.MaxPasswordAge.Days -eq 0) -as [bool]
  args:
    executable: powershell
  register: password_policy_status
  changed_when: password_policy_status.stdout == "False"

- name: Modifier l'antériorité maximale du mot de passe dans la GPO par défaut
  ansible.windows.win_shell: |
    Set-ADDefaultDomainPasswordPolicy -Identity "{{dns_zrd_name}}" -MaxPasswordAge (New-TimeSpan -Days 0)
  args:
    executable: powershell
  when: not password_policy_status.stdout | bool
  changed_when: password_policy_status.stdout == "False"


- name: Create Organizational Units
  microsoft.ad.ou:
    name: "{{ item.name }}"
    path: "{{ item.path }}"
    state: present
  loop: "{{ ad_ou_hierarchy }}"


- name: Vérifier si l'utilisateur existe
  ansible.windows.win_shell: |
    Import-Module ActiveDirectory
    $User = Get-ADUser -Filter {SamAccountName -eq "{{ item.name }}"}
    if ($User) { Write-Output "exists" } else { Write-Output "missing" }
  args:
    executable: powershell
  register: user_check
  loop: "{{ ad_users }}"
  loop_control:
    label: "{{ item.name }}"
  changed_when: false

- name: Créer l'utilisateur si absent
  microsoft.ad.user:
    name: "{{ item.name }}"
    firstname: "{{ item.firstname }}"
    lastname: "{{ item.lastname }}"
    display_name: "{{ item.display_name }}"
    email: "{{ item.email }}"
    path: "{{ item.path }}"
    password: "{{ item.password }}"
    enabled: yes
    description: "{{ item.description }}"
    password_never_expires: yes
    protect_from_deletion: no
  when: 
#    - user_check.results is defined
    - user_check.results | selectattr('item.name', 'equalto', item.name) | map(attribute='stdout') | first | trim == "missing"
  loop: "{{ ad_users }}"
  loop_control:
    label: "{{ item.name }}"



